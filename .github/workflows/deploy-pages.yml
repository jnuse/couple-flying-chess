# .github/workflows/deploy-pages.yml

name: Deploy to GitHub Pages (Static Export)

on:
  # push:
    # branches:
      # - main
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. 拉取代码
      - name: Checkout
        uses: actions/checkout@v4

      # 2. 设置 pnpm
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest

      # 3. 设置 Node.js 环境
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      # 4. 安装依赖
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # 5. ✨ 魔法步骤：临时修改 Next.js 配置以进行静态导出 ✨
      # 这一步会在构建开始前，向 next.config.mjs 文件中注入 output: 'export'
      # 这不会影响你仓库里的原始文件！
      - name: Modify next.config.mjs for static export
        run: |
          # 使用 sed 命令在文件的最后一个 '}' 之前插入静态导出配置
          # 这样做可以兼容大部分 next.config.mjs 的写法
          sed -i "/^};/i \  output: 'export',\n  images: { unoptimized: true }," next.config.mjs
          echo "--- Modified next.config.mjs for build ---"
          cat next.config.mjs
          echo "------------------------------------------"

      # 6. 构建静态站点 (现在它会生成 out 文件夹)
      - name: Build static site
        run: pnpm build

      # 7. 配置 GitHub Pages
      - name: Setup Pages
        uses: actions/configure-pages@v4

      # 8. 上传构建产物 (上传生成的 out 文件夹)
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './out'

      # 9. 部署到 GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
